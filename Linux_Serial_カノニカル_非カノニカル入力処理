ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
Linux Serial カノニカル｜非カノニカルの入力処理　について
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
/*
LinuxのSerialのカノニカル｜非カノニカルの入力処理について

注意：
入力処理とは、Deviceから送信されたキャラクタを、readで読み出される前に、処理することを指す。

2種類の入力処理の中で、適切なものを選ぶべき。


「詳解UNIXプログラミング」本から：
ーーーーーーーーーーーーーーーー
種類１：　カノニカル入力処理
ーーーーーーーーーーーーーーーー


カノニカルモードは単純である。
プロセスで読み取りを行うと、端末ドライバは入力された行を返す。読み取りから戻るにはいくつかの条件がある。

条件１：指定したByte数を読み取ると戻る。一行を纏めて読む必要はない。
	行の一部を読んだ場合でも、情報を紛失することはない。
	次回の読み取りは、直前の読み取りの終了点から始まる。
条件２：行の区切りに出会うと読み取りから戻る。11.3節でカノニカルモードにおいては、NL、EOL、EOL2、EOFの文字を「行の終わり」と解釈することを述べた。
	更に、11.5節の述べたように、ICRNLを設定しIGNCRを設定してない場合、CR文字はNL文字と同様な動作をするため行を区切る。
	これらの5つの行区切りのうち、EOFは端末ドライバで処理した後廃棄される。残りの4つは行の最後の文字として呼び出し側に返される。
条件３：Signal捕捉して、関数が自動的に再Startしない場合にも、読み取りから戻る。



ーーーーーーーーーーーーーーーー
種類２：　非カノニカル入力処理
ーーーーーーーーーーーーーーーー
termios構造体のc_lflagのICANON flagをOffにすると、非カノニカルモードを指定出来る。
非カノニカルモードでは、入力データを行に纏めない。
ERASE、KILL、EOF、NL、EOL、EOL2、CR、REPRINT、STATUS、WERASEの特別な文字は処理されない。

既に述べたように、カノニカルモードは簡単である。Systemは一度に１行を返す。しかし、非カノニカルモードでは、
SystemはProcessにデータを返す時期をどのように知るのであろうか？
一度に１Byteを返すと、非常に大きなOverheadを伴う(勿論、一度に２Byteを返すと、Overheadは半分に減る)。
つまり、読み取りを始める前に、何Byte読めるか分からないため、Systemが常に複数のByteを返すことが出来ないのだ。

解決策は、
	指定したデータ量を読み取った場合、或は
	指定した時間が経過した場合に、戻るようにSystemに設定することである。
	
	これには、termios構造体の配列c_cc[]の中の２つの変数：MIN,TIME(index: VMIN,VTIME)を使う。
	MINは、readから戻るまで最小Byte数を指定する。
	TIMEは、データの到着の待ち時間を1/10秒単位で指定する。

	なので、MIN、TIMEを使う時には、４パターンがある：
	場合A： MIN>0,TIME>0
	場合B： MIN>0,TIME=0
	場合C： MIN=0,TIME>0
	場合D： MIN=0,TIME=0

               MIN>0                                 MIN=0
         +---------------------------------+---------------------------------------------+
         |pattern A:                       |  pattern C:                                 |
         |  Timerが切れる前にread()は        |    Timerが切れる前にread()は[1,nbytes]を返す|
TIME>0   |  [MIN,nbytes]を返す。            |    Timerが切れるとread()は0を返す。         |
         |  Timerが切れると[1,MIN]を返す。    |    (タイマーはreadタイマー)                 |
         |  Timerはバイトタイマー             |                                             |
         |  呼び出し側無期限Blockされる。      |                                             |
         +-------------------------------------------------------------------------------+
         |pattern B:                       |  pattenr D:                                 |
TIME=0   |  データがあればread()は            |                                             |
         |    [MIN,nbytes]を返す             |    read()は直ちに[0,nbytes]を返す           |
         | (呼び出し側は無期限Blockされる)      |                                             |
         +---------------------------------+---------------------------------------------+






ーーーーーーーーーーーーーーーー
非同期入力
ーーーーーーーーーーーーーーーー
上記2つのモードは、更に、同期/非同期で使うことができるが、

Defaultは、入力が上手く行くまで、read()がBlockされる同期モードである。

非同期モードでは、read()は即座に終了し、
後で読み込みが完了した時に、プログラムにSignalが送られる。
このSignalは、Signal　Handlerを使って受け取るべき。

*/
