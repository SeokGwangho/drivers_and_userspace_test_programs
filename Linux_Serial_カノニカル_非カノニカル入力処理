Linux_Serial_カノニカル_非カノニカル入力処理

ポートの設定
/dev/ttyS*というデバイスは端末を Linux マシンに繋ぐためのもの で，通信を始めた後は端末に合わせた設定が行われます．この点は raw デバ イスを使って通信するプログラムを行う場合には，注意しておかなければなり まん．例えば，送ったキャラクタをエコーバックさせるようにシリアルポート を設定されていますが，通常データ送信のためにはこの設定は変更しなければ いけません．

全てのパラメータはプログラム内で簡単に設定できます．設定は ヘッダファイル<asm/termbits.h>で定義されている termios 構造体に保存されます．

 #define NCCS 19
struct termios {
        tcflag_t c_iflag;               /* input mode flags */
        tcflag_t c_oflag;               /* output mode flags */
        tcflag_t c_cflag;               /* control mode flags */
        tcflag_t c_lflag;               /* local mode flags */
        cc_t c_line;                    /* line discipline */
        cc_t c_cc[NCCS];                /* control characters */
};
この<asm/termbits.h> ファイルには，フラグの定義も全て記 述されています．c_iflag フラグには入力モードのフラグがいくつ か含まれており，全ての入力処理を指定します．入力処理とは，デバイスから 送られたキャラクタは，readで読み出される前に処理することがで きるということです．同様に，c_oflagは出力処理を扱います． c_cflagは，ボーレートや文字毎のビット数，ストップビットなどの ポート設定を記録しています．c_lflag 内のローカルモードフラグ は，文字がエコーされるかどうか，プログラムにシグナルが送られるかどうか 等を指定します．最後に，配列 c_cc では，ファイル終端，stop 等 の制御文字を定義します．制御文字のデフォルト値は <asm/termios.h> で定義されています．各フラグについては， オンラインマニュアルの termios(3) に説明があります．構造体 termiosは POSIX 準拠のシステムでは用いられない， c_line要素を含んでいます．
2.3 シリアルデバイスにおける入力の概念
ここでは，3つの異なる種類の入力の概念を説明します．利用目的に従って， 適切なものを選択してください．文字列全体を取得するのに，1文字読み込み のループを使うことはできる限り避けるべきです．私はこれをやったとき， 読み込み時に read が全くエラーを出力しなかったのにもかかわら ず，文字が欠けてしまったことがありました．

-----------------------------------------------------------------------
カノニカル入力処理
これは端末に対しての通常の処理モードですが，他のデバイスとの通信の時に も便利です．全ての入力は行単位で処理されます．つまり，read は 入力の1行全体のみを返してきます．デフォルトでは，行はNL(ASCII のLF)，ファイル終端，行終端文字のいずれかで終ります．標準の設 定では，CR (DOS/Windows のデフォルトの行終端文字)は行の終端と はなりません．

カノニカル入力処理では，消去(erase)，単語の削除(delete word)，文字の再 出力(reprint characters)，CRのNLへの変換などを扱うこ とができます．
-----------------------------------------------------------------------
非カノニカル入力処理
非カノニカル入力処理は，read 毎に決まった数の文字を扱う方法で，キャラ クタタイマを利用することもできます．このモードはアプリケーションが決まっ た文字数のキャラクタを読み込む時や，接続したデバイスが大量の文字を送っ てくる場合に使用します．
-----------------------------------------------------------------------
非同期入力
上記2つのモードは，同期及び非同期モードで使うことができます．デフォル トは，入力がうまくいくまで read 文がブロックされる同期モード です．非同期モードでは，read 文は即座に終了し，後で読み込みが 完了した時にプログラムにシグナルが送られます．このシグナルは，シグナル ハンドラを使って受け取ります．
-----------------------------------------------------------------------
複数入力からの入力待ち
これは別の入力モードというわけではありませんが，複数のデバイスを扱う時 に便利です．筆者のアプリケーションでは，TCP/IP ソケット経由の入力と他 のコンピュータからのシリアル接続経由の入力を擬似的に同時に扱っています． 以下に示すプログラム例では，異なる2つの入力ソースからの入力待ちを行い ます．片方のソースからの入力が可能になると，その入力が処理され，プログ ラムは次の入力を待ちます．

以下に示すアプローチはちょっと複雑に見えますが，Linux はマルチプロセッ シング OS であることを忘れてはいけません．selectシステムコー ルは入力待ちの間は CPU に負荷を与えませんが，ループを使った入力待ちを 行うと，同時に実行されている他のプロセスが遅くなってしまいます．
