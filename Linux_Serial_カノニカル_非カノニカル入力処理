ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
Linux Serial カノニカル｜非カノニカルの入力処理　について
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
注意：
入力処理とは、Deviceから送信されたキャラクタを、readで読み出される前に、処理することができる　ということである！

ーーーーーーーーーーーーーー
ポートの設定:
ーーーーーーーーーーーーーー
/dev/ttyS*というデバイスは、端末を Linux マシンに繋ぐためのもので，通信を始めた後は端末に合わせた設定が行われます．
この点は raw デバイスを使って通信するプログラムを行う場合には，注意必要．

例えば，送ったキャラクタをエコーバックさせるようにシリアルポートを設定されていますが，
通常データ送信のためにはこの設定は変更しなければいけません．


全てのParameterは、プログラム内で、簡単に設定できる．設定は、<asm/termbits.h>で定義されている termios 構造体に保存されてる：

#define NCCS 19
struct termios {
        tcflag_t c_iflag;               /* input mode flags */
        tcflag_t c_oflag;               /* output mode flags */
        tcflag_t c_cflag;               /* control mode flags */
        tcflag_t c_lflag;               /* local mode flags */
        cc_t c_line;                    /* line discipline */
        cc_t c_cc[NCCS];                /* control characters */
};

この<asm/termbits.h> ファイルには，フラグの定義も全て記述されています．

c_iflag フラグは【全ての入力処理】を指定出来る。
c_oflag フラグは【全ての出力処理】を指定出来る。
c_cflag フラグは、Baud rate、文字毎のBit数、Stop BitなどのPort設定を記録しています。
c_lflag フラグは、文字がエコーされるかどうか、プログラムにSignalが送られるかどうか 等を指定。
最後に，配列 
c_cc では、ファイル終端，stop 等 の制御文字を定義。制御文字のデフォルト値は <asm/termios.h> で定義している。
       各フラグについては， オンラインマニュアルの termios(3) に説明があります．
       構造体 termiosは POSIX 準拠のシステムでは用いられない， c_line要素を含んでいます．



ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
Serial　Deviceの3種類の異なる入力の概念：
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
利用目的に従って、3種類の中で、適切なものを選ぶべき。

文字列全体を取得するのに，1文字読み込みのループを使うことはできる限り避けるべき！



ーーーーーーーーーーーーーーーーーーーーーーーーーーー
種類１：　カノニカル入力処理（使能规范输入）
ーーーーーーーーーーーーーーーーーーーーーーーーーーー
これは端末に対しての通常の処理モードですが、他のデバイスとの通信の時にも便利。全ての入力は、行単位で処理される！

即ち、read は 入力の1行全体のみを返してきます．
Defaultでは，行はNL(ASCII のLF)、ファイル終端、行終端文字、のいずれかで終る。
標準の設定では、CR(DOS/Windows のデフォルトの行終端文字)は行の終端とはなってない！

カノニカル入力処理では、
     消去(erase)、
     単語の削除(delete word)、
     文字の再出力(reprint characters)、
     CRのNLへの変換などを扱うことが出来る。


ーーーーーーーーーーーーーーーーーーーーーーーーーーー
種類２：　非カノニカル入力処理（使用原始数据）
ーーーーーーーーーーーーーーーーーーーーーーーーーーー
非カノニカル入力処理は、read 毎に決まった数の文字を扱う方法で、キャラクタタイマを利用することもできる。
このモードは、Applicationが決まった文字数のキャラクタを読み込む時や、接続したデバイスが大量の文字を送ってくる場合に使用する。


ーーーーーーーーーーーーーーーーーーーーーーーーーーー
種類３：　非同期入力
ーーーーーーーーーーーーーーーーーーーーーーーーーーー
上記2つのモードは、更に、同期/非同期モードで使うことができている。

Defaultは、入力が上手く行くまで、read 文がBlockされる同期モードだ。

非同期モードでは、read 文は即座に終了し、後で読み込みが完了した時に、プログラムにSignalが送られる。
このSignalは、Signal　Handlerを使って受け取るべき。

ーーーーーーーーーーーーーーーーーーーーーーーーーーー
複数入力からの入力待ち
ーーーーーーーーーーーーーーーーーーーーーーーーーーー
これは別の入力モードというわけではないが、複数のデバイスを扱う時に便利だ。

select System call待ちの間は、Scheduleされて、CPU に負荷を与えないが、
Loopを使った入力待ちを行うと、同時に実行されている他のProcessが遅くなってしまうので、阿呆なやり方だ。
