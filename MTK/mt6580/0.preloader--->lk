 1、bootloader到kernel启动总逻辑流程图

最近的ARM架构中， EL0/EL1是必须实现的， EL2/EL3是选配， ELx跟层级对应关系：...

EL0 -- app
EL1 -- Linux kernel 、lk
EL2 -- hypervisor（虚拟化）
EL3 -- ARM trust firmware 、pre-loader

若平台未实现EL3（atf），pre-loader直接加载lk.
若平台实现EL3，则需要先加载完ATF再由ATF去加载lk.

 
 
 
bootloader 启动分两个阶段：
一个是preloader加载booloader（lk，u-boot等）的阶段，
另一个是bootloader加载kernel阶段。
 
下面跟着流程图(参考文件夹下的图片)简述第一个阶段的加载流程：  （数字1-3之类参图）

1-3：设备上电起来后，跳转到Boot ROM(不是flash)中的boot code中执行，
    把pre-loader加载起到ISRAM， 因为当前DRAM（RAM分SRAM跟DRAM，简单来说SRAM就是cache，DRAM就是普通内存）还没有准备好，
    所以要先把preloader load到芯片内部的ISRAM（Internal SRAM)中。 （跟samsung芯片一样）
    
4-6：preloader初始化好DRAM后， 就将lk从flash（nand/sd/emmc）中加载到DRAM中运行；

7-8：解压bootimage成ramdisk跟kernel, 并载入DRAM中,初始化dtb；

9-11：lk跳转到kernl初始化, kernel初始化完成后fork出init进程， 然后启动ramdisk中的init程序，进入用户空间初始化，
     init进程fork出zygote进程..直到整个Android启动完成.


2、从pre-loader到lk（mt6580为例）

Pre-loader主要干的事情就是初始化某些硬件，比如： UART,GPIO,DRAM,TIMER,RTC,PMIC 等等，建立起最基本的运行环境,最重要的就是初始化DRAM.

时序图： 
     参考此文件夹下的【从pre-loader到lk(mt6580)的时序图.jpg】
