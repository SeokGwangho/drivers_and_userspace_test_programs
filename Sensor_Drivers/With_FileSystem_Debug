
static int
imx219_read_reg(struct i2c_client *client, u16 addr, u8 *val)
{
	int err;
	struct i2c_msg msg[2];
	unsigned char data[3];

	if (!client->adapter)
		return -ENODEV;

	msg[0].addr = client->addr;
	msg[0].flags = 0;
	msg[0].len = 2;
	msg[0].buf = data;

	/* high byte goes out first */
	data[0] = (u8) (addr >> 8);
	data[1] = (u8) (addr & 0xff);

	msg[1].addr = client->addr;
	msg[1].flags = I2C_M_RD;
	msg[1].len = 1;
	msg[1].buf = data + 2;

	err = i2c_transfer(client->adapter, msg, 2);
	if (err == 2) {
		*val = data[2];
		return 0;
	}

	pr_err("%s:i2c read failed, addr %x, err %d\n",
			__func__, addr, err);

	return err;
}

static int
imx219_write_reg(struct i2c_client *client, u16 addr, u8 val)
{
	int err;
	struct i2c_msg msg;
	unsigned char data[3];

	if (!client->adapter)
		return -ENODEV;

	data[0] = (u8) (addr >> 8);
	data[1] = (u8) (addr & 0xff);
	data[2] = (u8) (val & 0xff);

	msg.addr = client->addr;
	msg.flags = 0;
	msg.len = 3;
	msg.buf = data;

	err = i2c_transfer(client->adapter, &msg, 1);
	if (err == 1)
		return 0;

	pr_err("%s:i2c write failed, addr %x, val %x, err %d\n",
			__func__, addr, val, err);

	return err;
}

static int
imx219_write_table(struct i2c_client *client,
				 const struct imx219_reg table[],
				 const struct imx219_reg override_list[],
				 int num_override_regs)
{
	int err;
	const struct imx219_reg *next;
	int i;
	u16 val;

	for (next = table; next->addr != IMX219_TABLE_END; next++) {
		if (next->addr == IMX219_TABLE_WAIT_MS) {
			msleep_range(next->val);
			continue;
		}

		val = next->val;

		/* When an override list is passed in, replace the reg */
		/* value to write if the reg is in the list            */
		if (override_list) {
			for (i = 0; i < num_override_regs; i++) {
				if (next->addr == override_list[i].addr) {
					val = override_list[i].val;
					break;
				}
			}
		}

		err = imx219_write_reg(client, next->addr, val);
		if (err) {
			pr_err("%s:imx219_write_table:%d", __func__, err);
			return err;
		}
	}
	return 0;
}

...
.....

static int major;
static struct class *cls;

static ssize_t imxOOO_debug_read(struct file *file, char __user *buf, size_t size, loff_t *offset)
{
    int ret;
    struct i2c_msg msg[2];
    unsigned char data[3];
    
    if (size != 1)
        return -EINVAL;
    
    copy_from_user(&data[0], buf, 2);
    
    msg[0].addr  = imxOOO_client->addr;
	  msg[0].buf   = &data;
	  msg[0].len   = 2;
	  msg[0].flags = 0;

	  msg[1].addr  = imxOOO_client->addr;
	  msg[1].buf   = data + 2;
	  msg[1].len   = 1;
	  msg[1].flags = I2C_M_RD;
    
    ret = i2c_transfer(imxOOO_client->adapter, msg, 2);
	  if (ret == 2) {
		  copy_to_user(buf, &data[2], 1);
		  return 1;
	  } else
		  return -EIO;
}

static ssize_t imxOOO_write(struct file *file, const char __user *buf, size_t size, loff_t *offset)
{
	int ret;
	struct i2c_msg msg;
  unsigned char data[3];
 
	if (size != 3)
		return -EINVAL;
	
	copy_from_user(&data[0], buf, 3);

	msg[0].addr  = imxOOO_client->addr;
	msg[0].buf   = data;
	msg[0].len   = 3;
	msg[0].flags = 0;

	ret = i2c_transfer(imxOOO_client->adapter, msg, 1);
	if (ret == 1)
		return 3;
	else
		return -EIO;
}

....
......
static struct file_operations imxOOO_fops = {
  .owner = THIS_MODULES,
  .read = imxOOO_debug_read,
  .write = imxOOO_debug_write,
};
...
.....
static int imxOOO_probe(struct i2c_client *client, const struct i2c_device_id *id)
{	
	major = register_chrdev(0, "imxOOO", &imxOOO_fops);

	cls = class_create(THIS_MODULE, "imxOOO");
	device_create(cls, NULL, MKDEV(major, 0), NULL, "imxOOO"); /* /dev/imxOOO */
	
	return 0;
}
