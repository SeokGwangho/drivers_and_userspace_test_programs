shiguanghu
------------------------------------------------------------------------------------------------------------------------------------------------
linux中阻塞和非阻塞的区别

所谓阻塞方式block，
    	顾名思义，就是进程或是线程,执行到这些函数时,必须等待某个事件的发生，如果事件没有发生，进程或线程就被阻塞睡眠，函数不能立即返回。

所谓非阻塞方式non-block，
	就是进程或线程执行此函数时,不必非要等待事件的发生，一旦执行肯定返回，用返回值的不同来反映函数的执行情况，
    	如果事件发生了则与阻塞方式相同，若事件没有发生则返回一个代码来告知事件未发生，而进程或线程继续执行，所以效率较高。
	
	可使用Select就可以完成非阻塞方式工作的程序，它能够监视我们需要监视的文件描述符的变化情况——读/写/异常。


------------------------------------------------------------------------------------------------------------------------------------------------

阻塞：
    	顾名思义,就是指在执行设备操作时若不能获得资源则挂起操作，直到满足可操作的条件后再进行操作，被挂起的进程进入休眠状态，
	被从调度器的运行队列移走，直到等待的条件满足。

非阻塞：
    	就是反过来，进程在不能进行设备操作时并不挂起，它或者放弃，或者不停的查询，直到可以进行位置。Busy...

--------------------------------------------------例子--------------------------------------------------
//阻塞地读取串口一个字符：
----------------------------------------------
    char buf; 
    fd = open("/dev/ttys",O_RDWR);
    .. .. 
    res = read(fd,&buf,1); //当串口上有输入时才返回,没有数据就被睡眠, 如果马上按了那用户应该是感觉不到的.
    if(res == 1) 
    { 
         printf("%c\n",buf); 
    }

----------------------------------------------
//非阻塞地读取串口一个字符：
----------------------------------------------
    char buf;
    fd = open("/dev/ttys",O_RDWR | O_NONBLOCK);
    .. .. 
    while( read(fd,&buf,1) !=1); //当串口上无输入也返回,所以要循环尝试读取串口
    printf("%c\n",buf);


--------------------------------------------------------------------------------------------
在Linux设备驱动中，可以使用等待队列(wait queue)来实现阻塞进程的唤醒.等待队列能够用于实现内核中的异步事件通知机制。
--------------------------------------------------------------------------------------------
Linux提供了有关等待队列的操作：

1) wait_queue_head_t my_queue;    //定义等待队列头
2) init_waitqueue_head(&my_queue);    //初始化队列头

   如果觉得上边两步来的麻烦，可以直接使用DECLARE_WAIT_QUEUE_HEAD(name)

3) DECLARE_WAITQUEUE(name,tsk);    //定义等待队列
4) void fastcall add_wait_queue(wait_queue_head_t *q, wait_queue_t *wait);
   void fastcall remove_wait_queue(wait_queue_head_t *q, wait_queue_t *wait);

     用于将等待队列wait添加到等待队列头指向的等待队列链表中 。

5)  wait_event(queue, conditon);
     wait_event_interruptible(queue, condition);//可以被信号打断
     wait_event_interruptible_timeout(queue, condition, timeout);//不能被信号打断

     queue:作为等待队列头的等待队列被唤醒
     conditon：必须满足，否则阻塞
     timeout和conditon相比，有更高优先级

6)  void wake_up(wait_queue_head_t *queue);
     void wake_up_interruptible(wait_queue_head_t *queue);

     上述操作会唤醒以queue作为等待队列头的所有等待队列中所有属于该等待队列头的等待队列对应的进程。

7)  sleep_on(wait_queue_head_t *q);
     interruptible_sleep_on(wait_queue_head_t *q);

     sleep_on作用是把目前进程的状态置成TASK_UNINTERRUPTIBLE,并定义一个等待队列，之后把他附属到等待队列头q，直到资源可用，q引导的等待队列被唤醒。interruptible_sleep_on作用是一样的， 只不过它把进程状态置为TASK_INTERRUPTIBLE.

    这两个函数的流程是首先，定义并初始化等待队列，把进程的状态置成TASK_UNINTERRUPTIBLE或TASK_INTERRUPTIBLE，并将对待队列添加到等待队列头。

然后通过schedule(放弃CPU,调度其他进程执行。最后，当进程被其他地方唤醒，将等待队列移除等待队列头。
    在Linux内核中，使用set_current_state()和__add_wait_queue()函数来实现目前进程状态的改变，直接使用current->state = TASK_UNINTERRUPTIBLE
类似的语句也是可以的。
    因此我们有时也可能在许多驱动中看到，它并不调用sleep_on或interruptible_sleep_on(),而是亲自进行进程的状态改变和切换。





------------------------------------------------------------------------------------------------------------------------------------------------
1 输入操作: read、readv、recv、recvfrom、recvmsg
------------------------------------------------------------------------------------------------------------------------------------------------
阻塞的套接口:
    如果某个进程对一个阻塞的TCP套接口调用以上这些(从外界)输入的函数之一，而该套接口的接收缓冲区中没有数据可读，该进程将被投入睡眠，直到到达一些数据 ---这就是所有阻塞型IO的特点,会被睡眠.

    TCP:
    既然TCP是字节流协议，该进程的唤醒就是只要到达一些数据：这些数据既可能是单个字节，也可以是一个完整的TCP分节中的数据。
        如果想等到某个固定数目的数据可读为止，可以调用readn函数，或者指定MSG_WAITALL标志。
        (这搞法跟我的read按键操作, 按键不被按下的话进入睡眠, 原理是一样的)
    UDP:
    既然UDP是数据报协议，如果一个阻塞的UDP套接口的接收缓冲区为空，对它调用输入函数的进程将被投入睡眠，直到到达一个UDP数据报。

    所以,不管是TCP还是UDP, 只要是阻塞型的套接口, 就可能被睡眠, 所以阻塞型就比较慢?

非阻塞的套接口:
    对于非阻塞的套接口，如果以上(从外界)输入操作不能被满足, 
    （对于TCP套接口,即至少有一个字节的数据可读;
      对于UDP套接口,即有一个完整的数据报可读）
    相应调用将立即返回一个 EWOULDBLOCK 错误。



问: 那么, 阻塞的套接口 | 非阻塞的套接口, 到底谁快?
答: 



    
-------------------------------
2 输出操作：write、writev、send、sendto、sendmsg
-------------------------------
    对于一个TCP套接口，内核将从应用进程的缓冲区到该套接口的发送缓冲区拷贝数据。
阻塞的套接口:
    对于阻塞的套接口，如果其发送缓冲区中没有空间，进程将被投入睡眠，直到有空间为止。
    
非阻塞的套接口:
    对于一个非阻塞的TCP套接口，如果其发送缓冲区中根本没有空间，输出函数调用将立即返回一个EWOULDBLOCK错误。
    如果其发送缓冲区中有一些空间，返回值将是内核能够拷贝到该缓冲区中的字节数。这个字节数也称为不足计数(short count)

    UDP套接口不才能在真正的发送缓冲区。内核只是拷贝应用进程数据并把它沿协议栈向下传送，渐次冠以UDP头部和IP头部。
    因此对一个阻塞的UDP套接口，输出函数调用将不会因为与TCP套接口一样的原因而阻塞，不过有可能会因其他的原因而阻塞。
----------------------------------------------------------------------




---------------------------------------------------------------------------------
Linux_UDP_socket_设置为的非阻塞_阻塞模式区别
---------------------------------------------------------------------------------
man recvfrom　結果:

       #include <sys/types.h>
       #include <sys/socket.h>

       ssize_t recv(int sockfd, void *buf, size_t len, int flags);
       ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags, struct sockaddr *src_addr, socklen_t *addrlen);
       ssize_t recvmsg(int sockfd, struct msghdr *msg, int flags);



//设置UDP socket 为非阻塞模式
Len = recvfrom(SocketFD, szRecvBuf, sizeof(szRecvBuf), MSG_DONTWAIT, (struct sockaddr *)&SockAddr, &ScokAddrLen);

//设置UDP socket 为阻塞模式
Len = recvfrom(SocketFD, szRecvBuf, sizeof(szRecvBuf), 0,            (struct sockaddr *)&SockAddr, &ScokAddrLen);


-------------------------------
Linux socket编程之 阻塞/非阻塞 套接字:
-------------------------------
　　每一个TCP套接口, 有一个发送缓冲区(内核空间)，可以用 SO_SNDBUF 套接口选项,来改变这个缓冲区的大小。
　　当应用进程调用 write时，内核从应用进程的缓冲区中, 拷贝所有数据到套接口的发送缓冲区(内核空间)。
　　如果套接口的发送缓冲区(内核空间),容不下应用程序的所有数据(或是应用进程的缓冲区大于套接口发送缓冲区，或是套接口发送缓冲区还有其他数据)，应用进程将被挂起(睡眠)。
　　
阻塞型套接字:
　　这里假设套接口是[阻塞]的，这是通常的缺省设置。
　　内核将不从write系统调用返回，直到应用进程缓冲区中的所有数据,都拷贝到套接口发送缓冲区。
　　因此从写一个TCP套接口的write,调用成功返回,仅仅表示我们可以重新使用应用进程的缓冲区, 它并不告诉我们对端的 TCP或应用进程已经接收了数据。 

    TCP取出套接口发送缓冲区的数据,并把它发送给对端TCP，其过程基于TCP数据传输的所有规则。
    对端TCP必须确认收到的数据，只有收到对端的ACK，本端TCP才能删除套接口发送缓冲区中已经确认的数据。
    TCP必须保留数据拷贝, 直到得到对端确认为止。 (TCP有三次握手之一?)



