负数在计算机中如何存储

计算机中的负数是以其补码形式存在的 补码=原码取反+1.
一个字节有8位 可以表示的数值范围在 -128到+127
用二进制表示也就是 10000000 - 01111111（注意：最高位表示符号）
最高位是1的都是负数, 最高位是0的都是正数

//符号位
在8位机中，规定每个字节的最高位为符号位。那么，+8就是00001000，而-8则是10001000。
但是，随便找一本《计算机原理》，都会告诉你，实际上，计算机内部采用2的补码（Two's Complement）表示负数。

//计算机处理加法运算逻辑
正数的原码，反码，补码都相同，负数的原码，反码，补码都不同。
[x]补码+[y]补码=[x+y]补码，如果结果是正数，正数补码等于原码，如果是负数再转化成原码（[x]原码=[[x]补]补）


//什么是补码，及计算方法
第一步，符号位不变，其余每一个二进制位都取相反值，0变成1，1变成0。比如，（-8）10001000的相反值就是11110111。
第二步，将上一步得到的值加1。11110111就变成11111000。
也就是说，-8在计算机（8位机）中就是用11111000表示。

//为什么要引入补码
   ０００１００００（16）
＋１１１１１０００（-8）补码
－－－－－－－－－
１００００１０００（8）补码=（8）原码

可以看到，按照正常的加法规则，得到的结果是10001000。注意，这是一个9位的二进制数。我们已经假定这是一台8位机，因此最高的第9位是一个溢出位，会被自动舍去。

   ００００１０００（8）补码
＋１１１１００００（-16）补码
－－－－－－－－－
   １１１１１０００（-8）补码-->（（-8）补）补=（10001000）-8（符号位不变，其余为取反+1）
